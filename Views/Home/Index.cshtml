@{
    ViewData["Title"] = "Home Page";
}
@model eda7k.Models.User

<head>
    <link rel="stylesheet" href="~/css/Table2.css">
    <link rel="stylesheet" href="~/css/simple-adaptive-slider.css">
    <script>
        document.addEventListener('DOMContentLoaded', () => {      
            new ItcSimpleSlider('#sliderAdmin', {
                loop: true,
                autoplay: false,
                swipe: false
            });
        });
    </script>
</head>

<body>
<div id="userPanel" style="display: inline">
    @if (Model.is_admin)
    {
        <button onclick='window.location.replace("admin")'>Админка</button> 
    }   
    <div style="display: inline; margin-left:65%;">
        Имя
        <input v-model="name" onchange="SetUserName(this.value)" />
    </div>
    <button onclick="Logout()">Выйти</button>
</div>

<div class="itcss" id="sliderAdmin">
    <div class="itcss__wrapper">
        <div class="itcss__items">
            <div class="itcss__item" style="background-color: antiquewhite;">          
                <div id="Welcome" style="display: flex; justify-content: center;">
                    Что будем кушать?
                </div>
                <div id="table">
                    <table class="table2">
                        <tr>
                            <th width="250">Блюдо</th>
                            <th width="150">Цена</th>
                            <th width="150">Общая цена</th>
                            <th width="150">Количество</th>
                        </tr>

                        <tr v-for="item in data">
                            <td>
                                <input type="hidden" v-model="item.id" />
                                <input v-model="item.name" readonly />
                            </td>
                            <td>
                                <input v-model="item.price" readonly />
                            </td>
                            <td>
                                <input :value="item.price * item.count" readonly>
                            </td>
                            <td>
                                <div class="plus-minus">
                                    <button class="minus" v-on:click="DecCount(item)">-</button>
                                    <div>
                                        {{item.count}}
                                    </div>
                                    <button class="plus" v-on:click="IncCount(item)">+</button>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td></td>
                            <td></td>
                            <td>
                                <input class="total" value="0"/>
                            </td>
                            <td></td>
                        </tr>
                    </table>
                    <button v-on:click="Order" class="Order">Заказать</button>
                </div>                
            </div>
            <div class="itcss__item" style="background-color: antiquewhite;">            
                <div id="Welcome" style="display: flex; justify-content: center;">
                    Допы?
                </div>
                <div id="tableExtra" style="display: flex; flex-direction: column; align-items: center;">
                    <table>
                        <tr>
                            <th width="350">Блюдо</th>
                            <th width="150">Цена</th>
                            <th width="150">Покупка</th>
                        </tr>
                        <tr v-for="extra in extras" v-bind:key="extra.id">
                            <td>
                                <input v-model="extra.name" style="width: 100%;" readonly/>
                            </td>
                            <td>
                                <input v-model="extra.price" readonly/>
                            </td>
                            <td>
                                <button v-on:click="Buy(extra.id)">Купить</button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <button class="itcss__btn itcss__btn_prev" role="button" data-slide="prev"></button>
    <button class="itcss__btn itcss__btn_next" role="button" data-slide="next"></button>
</div>  

<div class="orders" id="history">
    <div v-for="item in historyExtras" class="order-info">
        <div class="left-item">
            <div>
                Допы
            </div>            
        </div>
        <div class="right-item">            
            {{item.price}}р. {{item.name}}
        </div>
    </div>
    <div v-for="items in history" class="order-info">
        <div class="left-item">
            <div>
                Заказ
            </div>
            {{items.date.split("T")[0]}}
        </div>
        <div class="right-item">
            <div v-for="item in items.products">
                {{item.product.price}}р. {{item.count}}шт. {{item.product.name}}
            </div>
        </div>
    </div>
</div>
</body>
@section scripts{
    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script src="https://unpkg.com/vue@next"></script>
    <script src="~/js/simple-adaptive-slider.js"></script>

    <script>
        

        async function GetExtras() {
            return await fetch("positions/GetAllPositions", {
                method: 'POST'
            })
        }
        async function BuyPositionById(Id) {
            return await fetch("positions/BuyPositionById", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json;charset=utf-8'
                },
                body: JSON.stringify(Id)
            })
        }

        const TableExtra = {
            data() {
                return{
                    extras: []
                }
            },
            async mounted() {
                const responseExtras = await GetExtras();
                let extras = await responseExtras.json();
                this.extras = extras;
                this.LongPool();
            },
            methods: {
                Buy: function(Id) {
                        BuyPositionById(Id);
                        //this.extras = this.extras.filter((item) => {return item.id != Id});
                },
                LongPool: async function() {
                    let response = await fetch("positions/AskActionLongPool", {
                        method: 'POST'
                    });
            
                    if (response.status == 502) {
                        await this.LongPool();
                    }
                    else if (response.status != 200) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        await this.LongPool();
                    }
                    else {
                        let message = await response.json();
                        let deletingIndex = this.extras.findIndex((item) => {return item.id == message.value;})
                        if (deletingIndex != -1) {                    
                            this.extras.splice(deletingIndex, 1)                
                        }
                        await this.LongPool();
                    }
                }                
            }
        }
        Vue.createApp(TableExtra).mount('#tableExtra')
    </script>

    <script>
        function Logout() {
            return fetch("account/logout",{
                method: 'POST'
            }).then(()=>{
                location.reload();
            })
        }
        async function GetUserName() {
            return await fetch("home/GetUserName", {
                method: 'POST'
            })
        }
        async function SetUserName(value) {
            if(value.length < 3) {
                alert("Попробуйте другое имя")                
            }
            else{
                return await fetch("home/SetUserName", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json;charset=utf-8'
                    },
                    body: JSON.stringify(value)
                })
            }
        }

        const UserPanel = {
            data() {
                return {
                    name: ''
                }
            },
            async mounted() {
                const responseName = await GetUserName();
                let name = await responseName.text(); 
                this.name = name;
            }
        }
        Vue.createApp(UserPanel).mount('#userPanel');
    </script>

    <script>
        async function GetAllOrders() {
            return await fetch("home/GetAllOrders", {
                method: 'POST'
            })
        }
        async function GetPositionsForCurrentUser() {
            return await fetch("positions/GetPositionsForCurrentUser", {
                method: 'POST'
            })
        }

        const History = {
            data() {
                return {
                    history: [],
                    historyExtras: []
                }
            },
            async mounted() {
                const responseHistory = await GetAllOrders();
                let history = await responseHistory.json();
                this.history = history;   
        
                const responseHistoryExtras = await GetPositionsForCurrentUser();
                let historyExtras = await responseHistoryExtras.json();
                this.historyExtras = historyExtras;
                console.log(this.historyExtras);
            }   
        }
        Vue.createApp(History).mount('#history');
    </script>        

    <script>        
        async function GetProductsForOrder() {
            return await fetch("home/GetProductsForOrder", {
                method: 'POST'
            })
        }

        const Table = {
            data() {
                return {
                    data: []
                }
            },
            async mounted() {
                const response = await GetProductsForOrder();
                let data = await response.json();
                this.data = data;
                for (let i = 0; i < data.length; i++) {
                    data[i].count = 0;
                }        
            },
            methods: {
                DecCount: function (item) {                    
                    if (item.count > 0){
                        item.count--
                        var $total = $('input.total');
                        $total.val(parseInt($total.val()) - item.price)
                    }
                },
                IncCount: function (item){
                    item.count += 1
                    var $total = $('input.total');
                    $total.val(parseInt($total.val()) + item.price)
                },                
                Order: async function () {                                
                        let orders = new Array();
                        for (let i = 0; i < this.data.length; i++) {
                            orders.push({ ProductId: this.data[i].id, Count: this.data[i].count })
                        }
                        $.ajax({
                            contentType: "application/json",
                            method: "post",
                            url: "/home/DoOrder",
                            data: JSON.stringify(orders),
                            success: function (data) {
                                alert("Успешно! Заказ принят.");
                                window.location.reload();
                            },
                            error: function (er) {
                            }
                        });
                    
                }
            }
        }
        Vue.createApp(Table).mount('#table');        
    </script>
}
