@using eda7k.Models.Common
@{
    ViewData["Title"] = "Index";
}

<link rel="stylesheet" href="~/css/Index.css">
<link rel="stylesheet" href="~/css/air-datepicker.css">



<div id="Welcome">
    Составьте меню на завтра
</div>


<div id="table">
    <button id="AddBtn" v-on:click="AddNewLine">Добавить</button>
    <button id="SaveBtn" v-on:click="SaveChanges">Сохранить</button>
    <table>
        <tr>
            <th width="20"></th>
            <th width="250">Блюдо</th>
            <th width="250">Категория</th>
            <th width="150">Цена</th>
            <th width="150">Наценка</th>
            <th width="200">Будет ли завтра</th>
        </tr>
        <tr v-for="item in data">
            <td>
                <button id="button_X" v-on:click="deleteProd(item.id)">X</button>
                <input type="hidden" v-model="item.id" />
            </td>
            <td>
                <input v-model="item.name" />
            </td>
            <td>                
                <select v-model="item.category_id">     
                    <option v-for="category in categories" v-bind:value="category.id">
                    {{category.name}}
                    </option>                                  
                </select>                             
            </td>
            <td>
                <input v-model="item.price" />
            </td>
            <td>
                <input v-model="item.extra" />
            </td>
            <td>
                <input type="checkbox" v-model="item.availability_tomorrow" />
            </td>
        </tr>
    </table>
    <button v-on:click="logout" class="button" id="button_logout">Выйти</button>

    <div>
        дата на которую заказывают
        <input type="text" id="airdatepicker" class="form-control" style="width: 256px;"/>
        дата и время до которого можно будет сделать заказ
        <input type="text" id="airtimepicker" class="form-control" style="width: 256px;"/>
    </div>

    <div id="history">
        <div v-for="items in history" style="width:90px;display:inline-block;border:1px solid black">
            Заказ {{items.orderId}} 
            {{items.customerName}}
            <div v-for="item in items.products">
                 {{item.product.price}} {{item.count}} {{item.product.name}} 
            </div>
            Статус 
            <select v-model="items.statusId" v-on:change="ChangeOrderStatusById(items.orderId, items.statusId)">
                <option v-for="option in statuses" :value="option.id">
                    {{ option.name }}
                </option>
            </select>
            <br>
        </div>
    </div>
</div>




@section scripts
    {
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="https://unpkg.com/vue@next"></script>
<script src="~/js/air-datepicker.js"></script>

<script>
        async function getData() {
            return await fetch("admin/GetProducts", {
                method: 'POST'
            })
        }
    async function GetProductsForOrder() {
        return await fetch("home/GetProductsForOrder",{
            method: 'POST'
        })
    }
    async function GetCategories() {
        return await fetch("admin/GetCategories",{
            method: 'POST'
        })
    }
    async function DeleteProduct(id){
        $.ajax({
        method: "post",
        url: "/admin/DeleteProductById",
        data: {"id":id},
        success: function (data) {
        },
        error: function (er) {
        }
        });
    }
    async function GetAllOrders() {
        return await fetch("admin/GetAllOrders",{
            method: 'POST'
        })
    }

    async function GetStatuses() {
        return await fetch("/admin/GetStatuses", {
            method: 'POST'
        })
    }

    const Table = {
        data() {            
            return {
                history: [],
                categories: [],
                data: [],
                statuses:[],
            }
        },
        async mounted() {
            const response = await getData();
            let data = await response.json();
            this.data = data;
            
            const res1 = await GetCategories();
            let cat = await res1.json();
            this.categories = cat;
            
            const res2 = await GetAllOrders();
            let history = await res2.json();
            this.history = history;

            const res3 = await GetStatuses();
            let statuses = await res3.json();
            this.statuses = statuses;
        },
        methods:{
            logout: function(){
                fetch("account/logout",{
                        method: 'POST'
                }).then(()=>{
                    location.reload();
                })
            },
            deleteProd: async function(id){
                if (id != undefined)
                {
                    const response = await DeleteProduct(id);
                }
                var result = this.data.findIndex(obj => {
                    return obj.id === id
                })
                this.data.splice(result, 1)
            },
            AddNewLine: function(){
                emptyProduct = {
                    "price": null,
                    "category_id": null,
                    "extra": null,
                    "name": "",
                    "availability_tomorrow": false
                }
                this.data.push(emptyProduct)
            },
            SaveChanges: async function(){   
                console.log(this.data);           
                $.ajax({
                        contentType: "application/json",
                        type: "POST",
                        url: "/admin/UpdateProductTheBest",
                        data: JSON.stringify(this.data),
                        success: function (data) {  
                            alert("Сохранено");
                            window.location.reload(); 
                        },
                        error: function (er) {                    
                        }
                });                
                return false;
            },
            ChangeOrderStatusById: async function(id, newId){
                $.ajax({
                method: "post",
                url: "/admin/ChangeOrderStatusById",
                data: {
                    "id":id,
                    "newStatusId":newId
                },
                success: function (data) {
                },
                error: function (er) {
                    console.log(id);
                    console.log(newId);
                }
                });
            }
        }
    }

    Vue.createApp(Table).mount('#table')
</script>

<script>
    $(document).ready(function () {
        $('#button').click(function (e) {
            e.preventDefault();
            var btn = $(this);
            $.ajax({
                method: "POST",
                url: "/admin/massiv",
                dataType: "json",
                success: function (products) {
                    $("#textbox").textContent += products;
                    var group = JSON.stringify(products);
                    console.log(group);
                    $.ajax({
                        dataType: 'json',
                        contentType: "application/json",
                        type: "POST",
                        url: "/admin/massiv2",
                        data: group,
                        success: function (data) {
                            console.log("output : " + JSON.stringify(data));
                            data.forEach(
                                element => {
                                    $("#textbox").text($("#textbox").text() + " " + element.id);
                                }
                            );
                        },
                        error: function (er) {
                            console.log(er);
                        }
                    });

                },
                error: function (er) {
                    console.log(er);
                }
            });
        })
    });

    $(document).ready(function () {
        $('#button_auth').click(function (e) {
            e.preventDefault();
            var btn = $(this);
            $.ajax({
                method: "POST",
                url: "/Authentication/Authentication",
                data: {
                    "login": "admin"
                },
                success: function (data) {
                    $("#textbox").text($("#textbox").text() + " " +data);

                },
                error: function (er) {
                    console.log(er);
                    console.log(123);
                }
            });
        })
    });
</script>

<script>
    let config;
        (async () => {
        async function GetConfig() {
            return await fetch("admin/GetConfig", {
                method: 'POST'
            })
        }
            Date.prototype.addHours = function (h) {
                this.setHours(this.getHours() + h);
                return this;
            }
        async function SetConfig() {
            //config = { next_order_day: '123456789', last_time_to_do_order: '123456789' }
                $.ajax({
                    dataType: 'json',
                    contentType: "application/json",
                    method: "POST",
                    url: "admin/SetConfig",
                    data: JSON.stringify(config),
                    success: function (data) {
                        console.log(data);
                    },
                    error: function (er) {
                        console.log(er);
                    }
                });
        }

        async function GetData() {
            const res2 = await GetConfig();
            let cat2 = await res2.json();
            return cat2;
        }

        config = await GetData();

    let caled1 = new AirDatepicker('#airdatepicker', {
        position: 'top left',
            selectedDates: [config.next_order_day],
                onSelect({date, formattedDate, datepicker})
                {
                    config.next_order_day = date.addHours(3)
                    SetConfig()
                }

    });
            let caled2 = new AirDatepicker('#airtimepicker', {
        position: 'top left',
        timepicker: 'true',
                selectedDates: [config.last_time_to_do_order],
                onSelect({ date, formattedDate, datepicker }) 
                {
                    config.last_time_to_do_order = date.addHours(3)
                    SetConfig()
                }
            });
        })();
</script>
}

